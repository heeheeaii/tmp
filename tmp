#include <iostream>
#include <vector>
#include <functional>
#include <tuple>

template <typename Func, typename Tuple, std::size_t... I>
auto call_with_tuple(Func&& func, Tuple&& t, std::index_sequence<I...>) {
    return func(std::get<I>(std::forward<Tuple>(t))...);
}

template <typename Func, typename Tuple>
auto call_with_tuple(Func&& func, Tuple&& t) {
    constexpr auto size = std::tuple_size<std::decay_t<Tuple>>::value;
    return call_with_tuple(std::forward<Func>(func), std::forward<Tuple>(t), std::make_index_sequence<size>{});
}

template <typename Func, typename... Args>
auto make_callable(Func&& func, Args&&... args) {
    return [&]() {
        return call_with_tuple(func, std::make_tuple(args...));
    };
}

void RunTimeCallFunc(const std::vector<std::function<void()>>& funlist) {
    for (const auto& f : funlist) {
        f();
    }
}

void func1(int a, double b) {
    std::cout << "func1: " << a << ", " << b << std::endl;
}

void func2(double b, int a, const std::string& s) {
    std::cout << "func2: " << b << ", " << a << ", " << s << std::endl;
}

void func3() {
    std::cout << "func3: no arguments" << std::endl;
}

int main() {
    std::vector<std::function<void()>> funlist;

    funlist.push_back(make_callable(func1, 42, 3.14));
    funlist.push_back(make_callable(func2, 2.71, 7, "Hello"));
    funlist.push_back(make_callable(func3));
    RunTimeCallFunc(funlist);

    return 0;
}
