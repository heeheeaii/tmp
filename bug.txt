#include <iostream>
#include <string>
#include <functional>
#include <unordered_map>


template<typename... Args>
void reg(const std::string &name, void(*func)(Args...))
{
    static std::unordered_map<std::string, std::function<void(Args...)>> funcMap;
    funcMap[name] = func;
}

template<typename... Args>
auto getFunc(const std::string &name, Args &&... args)
{
    static std::unordered_map<std::string, std::function<void(Args...)>> funcMap;
    if (funcMap.find(name) != funcMap.end()) {
        return funcMap[name](std::forward<Args>(args)...);
    } else {
        std::cerr << "Function '" << name << "' not found!" << std::endl;
    }
}

void add(int a, int b, int & rst)
{
    rst = a + b;
}

void concat(const std::string &s1, const std::string &s2, std::string& rst)
{
    rst = s1 + s2;
}

int main()
{
    reg("add", add);
    reg("concat", concat);

    // 调用函数
    int c;
    getFunc("add", 1, 2, c);
    std::cout << c << std::endl;

    std::string str;
    getFunc("concat", "Hello", ", world!", str);
    std::cout << "Concatenated string: " << str << std::endl;

    return 0;
}
